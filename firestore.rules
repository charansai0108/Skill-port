rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for role checking
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'community-admin';
    }
    
    function isMentor() {
      return isAuthenticated() && getUserRole() == 'mentor';
    }
    
    function isStudent() {
      return isAuthenticated() && getUserRole() == 'student';
    }
    
    function isPersonal() {
      return isAuthenticated() && getUserRole() == 'personal';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function belongsToCommunity(communityId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.community == communityId;
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['firstName', 'lastName', 'email', 'role']) &&
        data.firstName is string && data.firstName.size() >= 2 && data.firstName.size() <= 50 &&
        data.lastName is string && data.lastName.size() >= 2 && data.lastName.size() <= 50 &&
        data.email is string && data.email.matches('.*@.*\\..*') &&
        data.role in ['community-admin', 'mentor', 'student', 'personal'];
    }
    
    // Users collection - enhanced security
    match /users/{userId} {
      // Users can read/write their own data
      allow read, write: if isOwner(userId);
      
      // Admins can read all users
      allow read: if isAdmin();
      
      // Mentors can read users in their community
      allow read: if isMentor() && belongsToCommunity(resource.data.community);
      
      // Validate user data on create/update
      allow create: if isAuthenticated() && 
        isValidUserData(request.resource.data) &&
        request.resource.data.uid == request.auth.uid;
        
      allow update: if isOwner(userId) && 
        isValidUserData(request.resource.data);
    }
    
    // Communities collection - enhanced security
    match /communities/{communityId} {
      // Authenticated users can read communities
      allow read: if isAuthenticated();
      
      // Only authenticated users can create communities
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['name', 'code', 'admin']) &&
        request.resource.data.admin == request.auth.uid &&
        request.resource.data.name is string && request.resource.data.name.size() >= 3 &&
        request.resource.data.code is string && request.resource.data.code.size() >= 3;
      
      // Only community admin can update
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.admin;
      
      // Only community admin can delete
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.admin;
    }
    
    // Contests collection - enhanced security
    match /contests/{contestId} {
      // Authenticated users can read contests
      allow read: if isAuthenticated();
      
      // Only authenticated users can create contests
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['title', 'createdBy', 'community']) &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.title is string && request.resource.data.title.size() >= 3;
      
      // Contest creators and admins can update
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.createdBy || isAdmin());
      
      // Only contest creators and admins can delete
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.createdBy || isAdmin());
    }
    
    // Submissions collection - enhanced security
    match /submissions/{submissionId} {
      // Users can read their own submissions
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // Mentors can read submissions in their community
      allow read: if isMentor() && 
        belongsToCommunity(resource.data.community);
      
      // Admins can read all submissions
      allow read: if isAdmin();
      
      // Users can create their own submissions
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['title', 'userId', 'contestId']);
      
      // Users can update their own submissions
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // Only submission owners can delete
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Notifications collection - enhanced security
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // Users can create notifications for themselves
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can update their own notifications
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Flags collection - enhanced security with rate limiting
    match /flags/{flagId} {
      // Authenticated users can create flags
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['userId', 'platform', 'title', 'difficulty']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.platform in ['leetcode', 'geeksforgeeks', 'hackerrank', 'interviewbit'] &&
        request.resource.data.difficulty in ['easy', 'medium', 'hard'] &&
        request.resource.data.title is string && request.resource.data.title.size() <= 200;
      
      // Authenticated users can read flags
      allow read: if isAuthenticated();
      
      // Only admins can update flags (resolve them)
      allow update: if isAdmin() && 
        request.resource.data.keys().hasAll(['status']) &&
        request.resource.data.status in ['open', 'resolved'];
      
      // Only admins can delete flags
      allow delete: if isAdmin();
    }
    
    // Admin collections - strict admin-only access
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Analytics collection - read-only for authenticated users
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Audit logs - admin only
    match /audit_logs/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Default deny rule - explicit deny for any unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
