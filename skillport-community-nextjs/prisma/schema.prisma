// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  password              String
  profilePic            String?
  bio                   String?
  theme                 String   @default("light")
  notificationSettings  Json     @default("{}")
  role                  UserRole @default(STUDENT)
  status                UserStatus @default(ACTIVE)
  batchId               String?
  emailVerified         Boolean  @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  tasks                 Task[]
  projects              Project[]
  dailyTasks            DailyTasks[]
  posts                 Post[]
  comments              Comment[]
  badges                Badge[]
  skills                Skill[]
  projectTasks          ProjectTask[]
  batch                 Batch?   @relation(fields: [batchId], references: [id], onDelete: SetNull)
  contestParticipants   ContestParticipant[]
  activityLogs          ActivityLog[]
  mentorFeedback        Feedback[] @relation("MentorFeedback")
  studentFeedback       Feedback[] @relation("StudentFeedback")
  notifications         Notification[]
  submissions           Submission[]
  subscriptions         Subscription[]
  payments              Payment[]
  deletionRequests      UserDeletionRequest[]
  consentRecords        ConsentRecord[]
  complianceAuditLogs   ComplianceAuditLog[]

  @@map("users")
}

model Task {
  id              String    @id @default(cuid())
  userId          String
  description     String
  platform        Platform
  difficulty      Difficulty
  completed       Boolean   @default(false)
  date            DateTime
  projectId       String?
  communityPostId String?
  priority        Priority  @default(MEDIUM)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectTasks    ProjectTask[]

  @@map("tasks")
}

model DailyTasks {
  id        String   @id @default(cuid())
  userId    String
  day       DayOfWeek
  taskIds   String[] // Array of task IDs for the day
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, day])
  @@map("daily_tasks")
}

model Project {
  id          String        @id @default(cuid())
  userId      String
  title       String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  projectTasks ProjectTask[]

  @@map("projects")
}

model ProjectTask {
  id        String   @id @default(cuid())
  projectId String
  taskId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, taskId])
  @@map("project_tasks")
}

model Community {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       Post[]

  @@map("communities")
}

model Post {
  id          String   @id @default(cuid())
  communityId String
  userId      String
  title       String
  description String
  platform    Platform?
  difficulty  Difficulty?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Badge {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String
  earnedAt    DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("badges")
}

model Skill {
  id                   String           @id @default(cuid())
  userId               String
  name                 String
  level                SkillLevel
  completionPercentage Int              @default(0)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("skills")
}

// Enums
enum Platform {
  LEETCODE
  GEEKSFORGEEKS
  HACKERRANK
  CODEFORCES
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum UserRole {
  STUDENT
  MENTOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ContestStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum BatchStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

// Admin Panel Models
model Admin {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  password              String
  profilePic            String?
  role                  String   @default("admin")
  isActive              Boolean  @default(true)
  lastLogin             DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("admins")
}

model Batch {
  id          String      @id @default(cuid())
  name        String
  description String?
  status      BatchStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  students    User[]
  mentors     MentorBatch[]
  contests    Contest[]

  @@map("batches")
}

model Mentor {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  profilePic    String?
  specialization String
  bio           String?
  isActive      Boolean  @default(true)
  rating        Float    @default(0)
  totalStudents Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  batches       MentorBatch[]

  @@map("mentors")
}

model MentorBatch {
  id        String   @id @default(cuid())
  mentorId  String
  batchId   String
  createdAt DateTime @default(now())

  // Relations
  mentor    Mentor   @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  batch     Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([mentorId, batchId])
  @@map("mentor_batches")
}

model Contest {
  id            String        @id @default(cuid())
  title         String
  description   String?
  category      String?
  status        ContestStatus @default(UPCOMING)
  startDate     DateTime
  endDate       DateTime
  batchId       String?
  createdBy     String?       // Mentor who created the contest
  maxParticipants Int?
  difficulty    String?       // EASY, MEDIUM, HARD
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  batch         Batch?        @relation(fields: [batchId], references: [id], onDelete: SetNull)
  participants  ContestParticipant[]
  problems      Problem[]
  feedback      Feedback[]
  submissions   Submission[]

  @@map("contests")
}

model ContestParticipant {
  id          String   @id @default(cuid())
  contestId   String
  userId      String
  status      String   @default("REGISTERED") // REGISTERED, PARTICIPATING, COMPLETED, DISQUALIFIED
  score       Int      @default(0)
  rank        Int?
  submittedAt DateTime?
  joinedAt    DateTime @default(now())
  completedAt DateTime?

  // Relations
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contestId, userId])
  @@map("contest_participants")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?  // Can be admin or mentor
  action    String
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

model Feedback {
  id        String   @id @default(cuid())
  mentorId  String
  studentId String
  contestId String?
  rating    Int      // 1-5 scale
  comment   String
  category  String?  // PERFORMANCE, BEHAVIOR, TECHNICAL, GENERAL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  mentor    User     @relation("MentorFeedback", fields: [mentorId], references: [id], onDelete: Cascade)
  student   User     @relation("StudentFeedback", fields: [studentId], references: [id], onDelete: Cascade)
  contest   Contest? @relation(fields: [contestId], references: [id], onDelete: SetNull)

  @@unique([mentorId, studentId, contestId])
  @@map("feedback")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // FEEDBACK_RECEIVED, CONTEST_ANNOUNCEMENT, etc.
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Problem {
  id          String   @id @default(cuid())
  contestId   String
  title       String
  description String
  difficulty  String   // EASY, MEDIUM, HARD
  points      Int
  timeLimit   Int      // in seconds
  memoryLimit Int      // in MB
  testCases   Json     // Array of test cases
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contest     Contest     @relation(fields: [contestId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@map("problems")
}

model Submission {
  id         String    @id @default(cuid())
  problemId  String
  userId     String
  contestId  String
  code       String
  language   String
  status     String    // PENDING, ACCEPTED, WRONG_ANSWER, TIME_LIMIT_EXCEEDED, etc.
  score      Int       @default(0)
  executionTime Int?   // in milliseconds
  memoryUsage   Int?   // in KB
  submittedAt   DateTime @default(now())

  // Relations
  problem    Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest    Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String
  planId            String
  razorpaySubId     String?           @unique
  status            SubscriptionStatus @default(PENDING)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean           @default(false)
  canceledAt        DateTime?
  trialStart        DateTime?
  trialEnd          DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments          Payment[]

  @@map("subscriptions")
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  subscriptionId    String?
  razorpayOrderId   String?       @unique
  razorpayPaymentId String?       @unique
  amount            Int           // Amount in paise
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  method            String?
  description       String?
  receipt           String?
  notes             Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("payments")
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

enum PaymentStatus {
  PENDING
  CAPTURED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model UserDeletionRequest {
  id                String            @id @default(cuid())
  userId            String
  reason            String?
  feedback          String?
  status            DeletionStatus    @default(PENDING)
  requestedAt       DateTime          @default(now())
  processedAt       DateTime?
  processedBy       String?
  scheduledDeletion DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_deletion_requests")
}

model ConsentRecord {
  id                String            @id @default(cuid())
  userId            String
  consentType       ConsentType
  granted           Boolean
  grantedAt         DateTime
  revokedAt         DateTime?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("consent_records")
}

model DataProcessingActivity {
  id                String            @id @default(cuid())
  activityName      String
  purpose           String
  legalBasis        LegalBasis
  dataCategories    String[]          // Array of data categories
  recipients        String[]          // Array of recipient categories
  retentionPeriod   String
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("data_processing_activities")
}

model ComplianceAuditLog {
  id                String            @id @default(cuid())
  userId            String?
  action            String
  entityType        String
  entityId          String?
  details           Json
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime          @default(now())

  // Relations
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("compliance_audit_logs")
}

enum DeletionStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ConsentType {
  COOKIES_ANALYTICS
  COOKIES_MARKETING
  COOKIES_FUNCTIONAL
  EMAIL_NOTIFICATIONS
  SMS_NOTIFICATIONS
  DATA_PROCESSING
  MARKETING_COMMUNICATIONS
}

enum LegalBasis {
  CONSENT
  CONTRACT
  LEGAL_OBLIGATION
  VITAL_INTERESTS
  PUBLIC_TASK
  LEGITIMATE_INTERESTS
}